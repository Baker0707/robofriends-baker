Welcome back.

Before we started learning about redux, we need to talk about something called state management.

We've heard this word before, state, right when building a reactor, have we had this DOD state and

state described what our app should look like?

If we remember this.

Well.

React is simply a group of components that are rendered in a tree like structure, so this would be

the app Dogs, for example.

And each one of these components would have stayed, for example, the red dots over here, they have

state.

So, for example, this app component will have a state of signed in as and let's say the state is user.

In that case, this user component might have a state of user match or if signed in, as is admin,

it might render the admin component.

And any time you see the blue dot, that means there was a change.

So if there's a change here, it can update something into this component.

And we render and we did this and react.

And I want you to think of state as memory.

An app needs to remember things in order to work.

Otherwise, we would just have simple e-mail Web pages like before.

Remember this Kako website?

This really doesn't have any state, does it?

Each time we show the exact same webpage to whoever is using it.

The speech has no idea of who the user is or.

Any interactions that I'm having, it's mainly just text.

Now, the Robo Friends app.

That's different, it has stayed on mostly because we wrote it and we had this thought state, but we

can interact with it.

I can type in here.

Leon and I have a state of the search box having Elita in it, and the robot's being filtered with just

LeAnn.

State describes how our app should look, our app, our robo friends app right now should look like

this was just one robot card because the state is of a search box having the letters elita inside of

it.

Now, with a simple app like the robo friend's app state was pretty easy to understand.

But state management is a really hard problem as our apps get bigger and bigger and bigger.

And you'll actually see in the later part of the course when we start working on the Smart Brain app,

which does the image recognition.

You'll notice how the state gets more and more complicated and your head starts to hurt because you

have to keep track of all these things happening.

So, again, with a simple react app, we can have nice views and maybe have different states and different

components, but eventually as our app gets bigger, we end up with something like this.

We're here, we have more and more components, more and more state within that component, or we can

have one massive state at the very top here, which also gets pretty hard.

And all these blue dots, as they update, they also have to update the state and then we render.

And this example over here is just a little diagram, but you can see with all these arrows how confusing

it's going to get and keeping track of all this state is really, really hard.

So we need some form of a state management.

And redux solve this problem for us.

How could we make this diagram simpler and make things easier to understand in our heads as Developers

Redux came up with a novel concept?

What if we just remove all the state, so this state from all the components?

What if we just have props?

So all these components just have props being passed down and now the state, we keep it in a store.

And a store is simply just the state, which is this state that react hard, but in one massive object,

just like you see here.

So one single object that describes how our app should look and all we do is just pass down that state

to whichever component needs it as props.

So our diagram from looking like this with Just React can go to looking like this with Redux where none

of the components need to hold state anymore.

And we can have one massive object that describes our entire app.

And whichever component needs that prop can just be passed out it.

And any updates that happen go through the state, the state gets modified and then we pass down that

information to the component.

This diagram might be confusing without actually quoting anything, and we'll come back to it, so this

makes sense.

But even just visually, you can see that this diagram looks a lot simpler than the diagram before it.

We have a lot less arrows and everything just flows nicer.

So as we go through the videos, you're going to get more and more familiar with this idea of state

management, but I want you to keep in mind that that is what Redux is solving.

Redux is a library that makes state management easier, not only for reac, but for any tools that we

use.

It just happens to work really, really well with React and Redux actually got inspiration from database

design, from things such as event sourcing or CQ Press, which you can read up more on databases had

the same problem.

All these updates and all these changes happened.

But we needed a way to make sure that all these changes are organized in a nice, cohesive way.

All right, let's get into the next video and get a little bit deeper with Redux.

I'll see in the next one.
=========================================================================
Welcome back.

I know we're all getting excited to start coding, but I want to do one last video before we actually

start working with some code, which is the exciting part.

But again, I want to emphasize that before we use anything, we need to understand why and why we would

need something like redux.

Right now, online and with any company that is working with react, most of them have also Redox.

So you'll hear React and Redox mentioned a ton when you're watching tutorials or working with react,

and that is because they go really, really well together.

Let's just go over a few things about redux that we want to make sure we learn.

And a bit of warning here.

Some of the stuff might go over your head or might be a little bit confusing.

But I want to show you these slides first, because after we go through the redux coding, when I come

back to them and make sure that these principles are applied and they make sense to you.

So bear with me.

Trust me, it's all going to make sense by the end.

Why do we want to use redux?

As we mentioned before, redux is really, really good at managing state, especially large state.

So Redux is a library that we would want to use if our apps get bigger and bigger and bigger and they

have a larger and larger state.

Remember, we want to use tools based on the problems of the self.

And redux solves the problem of what happens when react to apps get really, really big.

And using just this state just doesn't make sense anymore.

It gets more and more complicated.

Remember, react is what we call a view layer.

It's really good on the view side, but not necessarily at managing state.

So use redux when things get really, really complicated.

The second point is useful for sharing data between container's.

And this is another thing with when projects become large.

When they need to start sharing state between container's.

With react, this is actually a little bit difficult and you have to move the state up one layer so

that you have a parent that can share state between the two.

But with redux, this becomes really, really easy as we're going to demonstrate in our coding section.

And finally, Redux has predictable state management using the three principles now what are the three

principles?

These three principals in Redox are going to really, really make sense at the end, but I want to still

introduce them to you so that we're aware of them.

The first one is the idea of single source of truth, and this is a fancy way of saying that we have

one single big object that describes the entire state of the app.

Remember this?

We had one massive state object that describes everything within our app, so we have our single source

of truth because react reacts based on whatever the state is.

We can just have one big object that describes how the app should look and react will take care of it.

The second principle is the idea that state is read only and this encourages something called impeachability,

which is not modifying the object, and it prevents unexpected errors this way.

So the state object that we will create with redux will actually never get modified and instead we would

create a new state after each action is taken by the user.

And then finally, the third principle is the idea that changes are made only using pure functions,

something that we've talked about in my previous course, the idea that a pure function is something

that receives an input and always returns an output that is predictable.

If we enter the same input a thousand times, we expect that function to have the same output a thousand

times.

Using these principles, Redux has some new words that we're going to introduce in our vocabulary and

we're going to be comfortable with them by the end of the section.

The first one is action.

And action is something that a user does, such as clicking on a button or a drop down menu.

And what happens in Redux is as soon as a user clicks on something, a button and creates an action,

it goes through something called a reducer.

And a reducer is simply a function, a pure function that receives an input, which is the action.

So the user just clicked on a button and creates an output.

And this output is the state or the store, as we call it, in redux, which is the entire state of

the app.

So as it goes through the function, the store.

Gets updated and react because it notices this state change, makes changes to the VLA.

Again, these are wars that we're going to encounter as we start coding along.

Now, why do this?

I mean, can we just have an action and then an action happens and then we just make changes?

I mean, that's how something like Jacquier used to work.

And yeah, it looks more complicated, doesn't it, adding all these steps beforehand, but as you can

see above, if you have tons of actions happening, which with modern apps that are very interactive,

this happens a lot where the user scroll action and then the clicks of button and then highlight something

and so on and so forth, you see that the more and more actions we have, the more changes we have to

make.

And those changes might trigger other actions which trigger other changes and so on and so forth.

And you can get pretty, pretty complicated, as you can see in this diagram.

Well.

With redux, we make sure that all the actions go through one reducer, everything flows through this

function and through this function.

It always, because it's pure returns the same state based on the action and updates the store and this

store now, which represents what our app should look like, makes changes.

So it kind of funnels all these actions into one reducers so that everything is predictable and nice.

Again, one of those things that's hard to really explain without encountering the problem first, which

we'll get to now redux and I want to teach this just for historical purposes, uses an architectural

pattern called flux pattern architecture and software is used as a way to make sure that we're able

to solve problems in a logical sense and in an organized fashion.

And this flux pattern, which inspired the library redux, has this idea of having an action and then

having a dispatcher.

That dispatches this action to the store, which is our state, which updates the view and it's one

way dataflow, everything flows one way.

If the view gets updated, we go back to the action and again goes through dispatcher that dispatches

the change to the store and then to The View.

And this was a pretty revolutionary idea.

Because before that, we had something called NVC or Model View Controller, and you may have heard

of it, it was quite, quite popular.

The idea with the NBC pattern is we have an action and that action is read by a controller.

So, again, another JavaScript file that looks for actions, user clicks on a button.

And based on whatever the controller says, we update the model or the data in this case so we can think

of it.

A state we change something in the model and then it updates the view.

Now, the problem with the MVC pattern is, well, this diagram over here, we have the controller that

changes different pieces of the model, and this model can change the view that can trigger a another

change and that model can change another part of the view and so on and so forth.

And we have this thing that we saw before.

We have the craziness of actions and making changes, all these arrows just crisscrossing and not looking

very nice.

And although it might not be bad when your apps are smaller, as your apps get bigger, you want to

do something like this.

So it's logical and makes sense.

And that's what we want to do with architecture.

We want to architect our apps in ways that as they grow, although we may add a few things, in the

end, everything is easier to reason about and understand.

So we have the flux pattern, which enforces a unique directional dataflow.

We have the MVC pattern, which could definitely be improved.

If you get anything out of this video, the one thing I want you to understand is the idea that redux

at the end of the day is pretty much the same as this DOD state in react with three ducks.

We can replace this DOD state and theoretically remove all of this state from react and have it all

happen inside of this redux library, which, again, we're going to do but one caveat.

You could technically have redux with the state, but also still keep a little bit of riak state in

a component redux doesn't replace completely the this state or this set state.

In fact, you can still use them together.

And I'll show you when you might want to do that, when it's a good decision.

But like I said before, without having gone into any of the code of Redox, this might look a little

bit overwhelming and confusing.

I promise you that we're going to come back to these diagrams and things are going to make sense by

the end.

Before I throw code onto the screen, I want to make sure that you have some principles and concepts

that we're working from.

All right.

I know where you're thinking, Andre.

I am sick and tired of these slides, even though they have this cool grading color.

I need to see some code because I'm getting bored here.

Well, you know what?

Your prayers have been answered.

In the next video, we're finally going to start writing some code and get into some fun things.

I'll see in that one.
